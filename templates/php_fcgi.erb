#!/bin/bash
### BEGIN INIT INFO
# Provides:          php_fcgi_<%= bind %>
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the PHP FastCGI daemon.
### END INIT INFO
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BIND=/tmp/<%= bind %>.sock
USER=www-data
PHP_FCGI_CHILDREN=<%= php_fcgi_children %>
PHP_FCGI_MAX_REQUESTS=<%= php_fcgi_max_requests %>

PHP_CGI=/usr/bin/php-cgi
PHP_CGI_NAME=`basename $PHP_CGI`
PHP_CGI_ARGS="- USER=$USER PATH=/usr/bin PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN PHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS $PHP_CGI -b $BIND"
RETVAL=0
PROCESS_TO_KILL=$(ps aux | grep "<%= bind %>.sock" | grep -v grep| awk '{print $2}')

test -x $PHP_CGI || exit 0

## Get the status of the PHP FastCGI daemon(s).
php_cgi_status () {
    pidof $PHP_CGI 2&>1 >/dev/null && echo " * $NAME is running" || echo " * $NAME is not running"
}




start() {
      echo -n "Starting PHP FastCGI: "
      start-stop-daemon --quiet --start --background --chuid "$USER" --exec /usr/bin/env -- $PHP_CGI_ARGS
      RETVAL=$?
      echo "$PHP_CGI_NAME."
}
stop() {
      echo -n "Stopping PHP FastCGI: "
      kill 9 $PROCESS_TO_KILL
      RETVAL=$?
      echo "$PHP_CGI_NAME."
}

case "$1" in
    start)
      start
  ;;
    stop)
      stop
  ;;
    restart)
      stop
      start
  ;;
  status)
    php_cgi_status
  ;;
  *)
      echo "Usage: php-fcgi {start|stop|status|restart}"
      exit 1
  ;;
esac
exit $RETVAL


